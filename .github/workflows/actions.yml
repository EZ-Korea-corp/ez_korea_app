# Actions에서 보여질 workflow 이름
name: CI/CD

# 트리거 지정
# master 브랜치에 push가 일어날 때 실행
on:
  push:
    branches:
      - master

# yml 내에서 사용할 변수
env:
  S3_BUCKET_NAME: ezkorea-bucket
  PROJECT_NAME: ez_korea_app

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      ## Setting JDK
      ## 본인 spring 버전에 맞는 버전 지정
      ## https://github.com/actions/setup-java
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## Create application.yml
      - name: make prod application.yml
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES_MAIN_PROD }}" > ./application.yml
        shell: bash

      ## Create application-test.yml
      - name: make test application-test.yml
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources
          touch ./application-test.yml
          echo "${{ secrets.PROPERTIES_TEST }}" > ./application-test.yml
        shell: bash

      ## Create application-prod.yml
      - name: make prod application-prod.yml
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      ## Gradle Build
      - name: Build with Gradle
        run: ./gradlew build

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_KEY }}
          aws-region: ap-northeast-2

      # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy
      
      # S3에 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      # Deploy
      - name: Deploy
        run: |
          aws deploy create-deployment \
          --application-name ezkorea-project \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ezkorea-app-prod \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=ezkorea-bucket,bundleType=zip,key=ez_korea_app/$GITHUB_SHA.zip \
          --region ap-northeast-2 \
