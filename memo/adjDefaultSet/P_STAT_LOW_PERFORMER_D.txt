DELIMITER //

DROP PROCEDURE IF EXISTS P_STAT_LOW_PERFORMER_D;
CREATE PROCEDURE P_STAT_LOW_PERFORMER_D(T_ID INT)
BEGIN

	-- 반복문 변수선언
	DECLARE done int DEFAULT 0;

	-- 변수 선언
    DECLARE TOTAL 			DOUBLE;
    DECLARE ID 				DOUBLE;
	DECLARE PART 			VARCHAR (45);
    DECLARE NAME 		VARCHAR (45);
    DECLARE ADJ_NO 		DOUBLE;
    DECLARE LOW_FORM_ADJ VARCHAR (1000);
    
DECLARE CUR_DIV CURSOR FOR 
	SELECT      A.ID
					, A.NAME
					, CASE WHEN B.PART = 'am' THEN '오전' 
								WHEN B.PART = 'pm' THEN '오후'
                                ELSE '풀타임'
						END AS PART
					, B.TOTAL
		FROM
		(
			SELECT    A.ID
						, A.NAME
						, A.DIVISION_ID
						, A.TEAM_ID
			FROM    MEMBER A
			WHERE   A.TEAM_ID IS NOT NULL
			AND		A.MEMBER_STATUS = 'FULL_TIME'
			UNION ALL
			SELECT    B.ID
					, B.NAME
					, A.ID AS DIVISION_ID
					, 0 AS TEAM_ID
			FROM    DIVISION A INNER JOIN MEMBER B
			ON      A.LEADER_ID = B.ID
			WHERE   B.MEMBER_STATUS = 'FULL_TIME'
		) A INNER JOIN
		(
			SELECT    A.MEMBER_ID
					, A.PART
					, CASE WHEN A.PART = 'full' THEN '500000' WHEN A.PART = 'pm' THEN '300000' ELSE '200000' END AS MIN
					, IFNULL(SUM(A.PRICE), 0) AS TOTAL
					, IFNULL(SUM(CASE WHEN A.PAYMENT = 'card' THEN A.PRICE END), 0) AS CARD
					, IFNULL(SUM(CASE WHEN A.PAYMENT = 'cash' THEN A.PRICE END), 0) AS CASH
			FROM
			(
				SELECT A.MEMBER_ID
							, A.PART
							, A.PAYMENT
							, SUM(A.COUNT * B.PRICE) AS PRICE
				FROM
				(
					SELECT    A.MEMBER_ID
							, A.PART
							, B.SORT
							, B.PAYMENT
							, SUM(B.COUNT) AS COUNT
					FROM    TIME_TABLE A INNER JOIN SELL_PRODUCT B
					ON 		A.ID = B.TIME_TABLE_ID
					WHERE   A.TASK_DATE = DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 0 DAY), '%Y-%m-%d')
					AND		B.STATUS = 'out'
					AND		B.COUNT   > 0
					GROUP BY A.MEMBER_ID, A.PART, B.SORT, B.PAYMENT
				) A INNER JOIN
				(
					SELECT    A.WIPER_SORT AS SORT
								, MAX(A.WIPER_PRICE) AS PRICE
					FROM    WIPER A
					GROUP BY A.WIPER_SORT
				) B
				ON A.SORT = B.SORT
				GROUP BY A.MEMBER_ID, A.PART, A.PAYMENT
			) A
			GROUP BY A.MEMBER_ID, A.PART
		) B
		ON 		 A.ID = B.MEMBER_ID
		WHERE A.TEAM_ID = T_ID
        AND   	 B.MIN > B.TOTAL;
    
    -- 반복문 핸들러 선언
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;
    
	 -- 트랜잭션 시작
    START TRANSACTION;

    -- 커서오픈
    OPEN CUR_DIV;

    -- 반복문 시작
    read_loop: LOOP

        -- 커서에서 데이터 가져옴
        FETCH CUR_DIV INTO ID, NAME, PART, TOTAL;

        -- 반복문 종료 조건
        IF done THEN
            LEAVE read_loop;
        END IF;
         
		-- 키값 조회
		SELECT   A.ID, CASE WHEN A.LOW_FORM_ADJ IS NULL THEN '' ELSE CONCAT(A.LOW_FORM_ADJ, ', ') END
        INTO 		ADJ_NO, LOW_FORM_ADJ
        FROM 	ADJUSTMENT A 
		WHERE	A.TEAM_NO = T_ID 
        AND 		A.ADJ_DATE = DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 0 DAY), '%Y-%m-%d');
        
        IF(ADJ_NO IS NOT NULL) THEN
        
			UPDATE ADJUSTMENT A 
			SET A.LOW_FORM_ADJ = CONCAT(IFNULL(LOW_FORM_ADJ, ""), IFNULL(NAME, ""), '(', IFNULL(PART, ""), ':', IFNULL(TOTAL, 0), ')')
			WHERE A.ID = ADJ_NO;
        
        END IF;
        
		 -- 데이터 초기화
		 -- DELETE FROM LOW_PERFORMER A
		 -- WHERE	A.ADJUSTMENT_ID = ADJ_NO;
        
         -- 데이터 삽입
		 -- INSERT INTO LOW_PERFORMER(CREATE_DATE, MODIFY_DATE, MEMBER_ID, PART_TIME, SALES, ADJUSTMENT_ID) 
         -- VALUES(NOW(), NOW(), ID, PART, TOTAL, ADJ_NO);

    -- 반복문 끝
    END LOOP read_loop;

    -- 커서해제
    CLOSE CUR_DIV;

     -- 테이블 출력
    -- SELECT * FROM LOW_PERFORMER;
    
     /* 커밋 */
	COMMIT;
    
END $$
// DELIMITER ;