<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezkorea.hybrid_app.domain.myBatis.SaleMbRepository">

    <select id="findSaleStock" parameterType="long" resultType="com.ezkorea.hybrid_app.web.dto.SaleProductDto">
        SELECT    A.WIPER_ID AS WIPER
                , SUM(
                       CASE WHEN A.STATUS = 'in' THEN A.CNT
                            ELSE A.CNT * -1
                       END
                  ) AS COUNT
        FROM
        (
            SELECT	  A.WIPER_ID
                    , A.STATUS
                    , SUM(A.COUNT) AS CNT
            FROM	SALE_PRODUCT A INNER JOIN
            (
                SELECT	B.ID
                FROM	DAILY_TASK A INNER JOIN DAILY_TASK B
                ON		A.GAS_STATION_ID = B.GAS_STATION_ID
                AND		A.TASK_DATE	     >= B.TASK_DATE
                WHERE	A.ID = #{taskId}
            ) B
            ON	A.TASK_ID = B.ID
            GROUP BY A.WIPER_ID, A.STATUS
        ) A
        GROUP BY A.WIPER_ID
    </select>

    <select id="findSaleOutFix" parameterType="Map" resultType="com.ezkorea.hybrid_app.web.dto.SaleProductDto">
        SELECT	  A.WIPER_ID   AS WIPER
                , SUM(A.COUNT) AS COUNT
        FROM    SALE_PRODUCT A RIGHT JOIN DAILY_TASK B
        ON		A.TASK_ID = B.ID
        WHERE	B.ID      = #{taskId}
        AND		A.STATUS  = #{status}
        GROUP BY A.WIPER_ID
    </select>

    <select id="findStockHistory" parameterType="map" resultType="com.ezkorea.hybrid_app.web.dto.SaleProductDto">
        SELECT    A.WIPER_ID AS WIPER
                 , SUM(
                        CASE WHEN A.STATUS = 'in' THEN A.CNT
                             ELSE A.CNT * -1
                        END
                  ) AS COUNT
        FROM
            (
                SELECT	  B.WIPER_ID
                        , B.STATUS
                        , SUM(B.COUNT) AS CNT
                FROM    DAILY_TASK A INNER JOIN SALE_PRODUCT B
                ON      A.ID = B.TASK_ID
                WHERE   A.GAS_STATION_ID = #{stationId}
                AND		A.TASK_DATE <![CDATA[<=]]> IFNULL(#{date}, DATE_FORMAT(NOW(), '%y-%m-%d'))
                GROUP BY B.WIPER_ID, B.STATUS
            ) A
        GROUP BY A.WIPER_ID
    </select>

    <select id="findInOutDetail" parameterType="map" resultType="com.ezkorea.hybrid_app.web.dto.SaleProductDto">
        SELECT	  B.WIPER_ID   AS WIPER
                , SUM(B.COUNT) AS COUNT
        FROM    DAILY_TASK A INNER JOIN SALE_PRODUCT B
        ON      A.ID = B.TASK_ID
        WHERE   A.ID = #{taskId}
        AND		B.STATUS = #{status}
        <if test="rn != null and rn != ''">
            AND		B.RN = #{rn}
        </if>
        GROUP BY B.WIPER_ID
    </select>

    <select id="findLastWithdraw" parameterType="Map" resultType="Long">
        SELECT A.ID
        FROM   DAILY_TASK A INNER JOIN SALE_PRODUCT B
        ON     A.ID = B.TASK_ID
        WHERE  A.GAS_STATION_ID = #{stationId}
        AND    B.STATUS         = #{status}
        ORDER BY B.CREATE_DATE DESC
        LIMIT 1
    </select>

    <select id="findLastWithdrawList" parameterType="Map" resultType="com.ezkorea.hybrid_app.web.dto.SaleProductDto">
        SELECT    A.WIPER_ID AS WIPER
                , SUM(A.COUNT) AS COUNT
                , MAX(A.TASK_ID) AS TASK_ID
        FROM    SALE_PRODUCT A
        WHERE   A.TASK_ID = #{taskId}
        AND     A.STATUS  = #{status}
        GROUP BY A.WIPER_ID
    </select>

    <select id="findInProductList" parameterType="long" resultType="Map">
        SELECT    A.RN AS RN
                , DATE_FORMAT(MAX(A.CREATE_DATE), '%H:%i') AS CREATE_DATE
        FROM    sale_product A
        WHERE   A.TASK_ID = #{taskId}
        AND     A.STATUS = 'in'
        GROUP BY A.RN
        ORDER BY A.RN
    </select>

    <select id="findStatList" parameterType="Map" resultType="Map">
        SELECT    A.NAME      AS NAME
                , B.COUNT / 2 AS COUNT
        FROM    MEMBER A INNER JOIN
        (
            SELECT  A.MEMBER_ID
                    , SUM(B.COUNT) AS COUNT
            FROM    DAILY_TASK A INNER JOIN
            (
                SELECT 	  A.TASK_ID
                        , SUM(A.COUNT) AS COUNT
                FROM    SALE_PRODUCT A
                WHERE   A.STATUS = 'out'
                GROUP BY A.TASK_ID
            ) B
            ON      A.ID = B.TASK_ID
            <if test="status != null and !''.equals(status)">
                <choose>
                    <when test="'day'.equals(status)">
                        WHERE   A.TASK_DATE = DATE_FORMAT(NOW(), '%y-%m-%d')
                    </when>
                    <when test="'week'.equals(status)">
                        WHERE   A.TASK_DATE <![CDATA[>=]]> ADDDATE(CURDATE(), - WEEKDAY(CURDATE()) + 0 )
                        AND		A.TASK_DATE <![CDATA[<=]]> ADDDATE(CURDATE(), - WEEKDAY(CURDATE()) + 6 )
                    </when>
                    <otherwise>
                        WHERE   A.TASK_DATE <![CDATA[>=]]> LAST_DAY(NOW() - INTERVAL 1 MONTH) + INTERVAL 1 DAY
                        AND		A.TASK_DATE <![CDATA[<=]]> LAST_DAY(NOW())
                    </otherwise>
                </choose>
            </if>
            GROUP BY A.MEMBER_ID
        ) B
        ON A.ID = B.MEMBER_ID
        ORDER BY B.COUNT DESC
        LIMIT 10
    </select>

    <select id="findTotalStat" parameterType="Map" resultType="Map">
        WITH STAT AS (
            SELECT     MAX(B.WIPER_VIEW_NAME) AS NAME
                     , MAX(B.WIPER_SORT) AS SORT
                     , SUM(A.COUNT) AS COUNT
                     , MAX(B.WIPER_PRICE) * SUM(A.COUNT) AS PRICE
            FROM
            (
                SELECT	  A.WIPER_ID
                        , SUM(A.COUNT) AS COUNT
                FROM    SALE_PRODUCT A INNER JOIN DAILY_TASK B
                ON      A.TASK_ID = B.ID
                WHERE   A.STATUS = 'out'
                <if test="status != null and !''.equals(status)">
                    <choose>
                        <when test="'day'.equals(status)">
                            AND B.TASK_DATE = DATE_FORMAT(NOW(), '%y-%m-%d')
                        </when>
                        <when test="'week'.equals(status)">
                            AND B.TASK_DATE <![CDATA[>=]]> ADDDATE(CURDATE(), - WEEKDAY(CURDATE()) + 0 )
                            AND B.TASK_DATE <![CDATA[<=]]> ADDDATE(CURDATE(), - WEEKDAY(CURDATE()) + 6 )
                        </when>
                        <otherwise>
                            AND B.TASK_DATE <![CDATA[>=]]> LAST_DAY(NOW() - INTERVAL 1 MONTH) + INTERVAL 1 DAY
                            AND B.TASK_DATE <![CDATA[<=]]> LAST_DAY(NOW())
                        </otherwise>
                    </choose>
                </if>
                GROUP BY A.WIPER_ID
            ) A INNER JOIN WIPER B
            ON A.WIPER_ID = B.ID
            GROUP BY B.WIPER_SORT
        )
        SELECT    A.NAME AS NAME
                , A.SORT AS SORT
                , A.COUNT AS COUNT
                , A.PRICE AS PRICE
        FROM    STAT A
        UNION ALL
        SELECT    '합계' AS NAME
                , 'total' AS SORT
                , SUM(A.COUNT) AS COUNT
				, SUM(A.PRICE) AS PRICE
        FROM    STAT A
    </select>

    <select id="findTablePrice" parameterType="Map" resultType="Map">
        WITH STAT AS (
            SELECT    A.PAYMENT AS PAYMENT
                    , SUM(A.COUNT * B.PRICE) AS PRICE
            FROM
            (
                SELECT    A.SORT
                        , A.PAYMENT
                        , SUM(A.COUNT) AS COUNT
                FROM    SELL_PRODUCT A INNER JOIN
                (
                    SELECT  B.ID
                    FROM    TIME_TABLE A  INNER JOIN TIME_TABLE B
                    ON      A.PART = B.PART
                    AND     A.TASK_DATE = B.TASK_DATE
                    AND     A.GAS_STATION_ID = B.GAS_STATION_ID
                    WHERE   A.ID = #{tTid}
                    AND     A.PART <![CDATA[<>]]> 'in'
                ) B
                ON A.TIME_TABLE_ID = B.ID
                WHERE A.STATUS = 'out'
                GROUP BY A.SORT, A.PAYMENT
            ) A INNER JOIN
            (
                SELECT    A.WIPER_SORT AS SORT
                        , MAX(A.WIPER_PRICE) AS PRICE
                FROM    WIPER A
                GROUP BY A.WIPER_SORT
            )B
            ON A.SORT = B.SORT
            GROUP BY A.PAYMENT
        )
        SELECT    A.PAYMENT
                , A.PRICE
        FROM    STAT A
        UNION ALL
        SELECT  '총계'
                , SUM(A.PRICE)
        FROM    STAT A
    </select>

    <select id="findTableCount" parameterType="Map" resultType="Map">
        SELECT     A.NAME
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME AND A.SORT = 'normal' THEN A.COUNT END), 0) AS normal
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME AND A.SORT = 'hybrid' THEN A.COUNT END), 0) AS hybrid
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME AND A.SORT = 'mw' THEN A.COUNT END), 0) AS mw
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME AND A.SORT = 's_class' THEN A.COUNT END), 0) AS s_class
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME AND A.SORT = '700' THEN A.PRICE END), 0) AS s_700
                 , IFNULL(SUM(CASE WHEN A.NAME = A.NAME THEN A.PRICE END), 0) AS total
        FROM
        (
            SELECT    B.SORT
                    , A.NAME
                    , SUM(B.COUNT) AS COUNT
                    , SUM(B.COUNT) * C.PRICE AS PRICE
            FROM
            (
                SELECT  B.ID, C.NAME
                FROM    TIME_TABLE A  INNER JOIN TIME_TABLE B
                ON A.PART = B.PART
                INNER JOIN MEMBER C
                ON B.MEMBER_ID = C.ID
                AND A.TASK_DATE = B.TASK_DATE
                AND A.GAS_STATION_ID = B.GAS_STATION_ID
                WHERE A.ID = #{tTid}
                AND   A.PART <![CDATA[<>]]> 'in'
            ) A
            LEFT OUTER JOIN
            (
                SELECT    A.TIME_TABLE_ID
                        , A.SORT
                        , A.COUNT
                FROM    SELL_PRODUCT A
                WHERE   A.STATUS = 'out'
            ) B
            ON A.ID = B.TIME_TABLE_ID
            LEFT OUTER JOIN
            (
                SELECT    A.WIPER_SORT AS SORT
                        , MAX(A.WIPER_PRICE) AS PRICE
                FROM    WIPER A
                GROUP BY A.WIPER_SORT
            ) C
            ON B.SORT = C.SORT
            GROUP BY B.SORT, A.NAME
        ) A
        GROUP BY A.NAME
    </select>

    <select id="findTableFix" parameterType="Map" resultType="Map">
        SELECT    A.SORT AS SORT
                , A.MEMO AS MEMO
        FROM    SELL_PRODUCT A INNER JOIN
        (
            SELECT  B.ID
            FROM    TIME_TABLE A  INNER JOIN TIME_TABLE B
            ON A.PART = B.PART
            INNER JOIN MEMBER C
            ON B.MEMBER_ID = C.ID
            AND A.TASK_DATE = B.TASK_DATE
            AND A.GAS_STATION_ID = B.GAS_STATION_ID
            WHERE A.ID = #{tTid}
            AND   A.PART <![CDATA[<>]]> 'in'
        ) B
        ON A.TIME_TABLE_ID = B.ID
        WHERE A.STATUS = 'fix'
    </select>
</mapper>